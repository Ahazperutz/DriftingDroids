TODO

board layout:
-user can build boards from scratch = put each individual wall and goal.

gameplay:
-user can move robots while searching for the solution (with undo/redo).

gui:
-better graphics (robots, goals, board, ...)

solver:
-implement a better solver algorithm (use less time and less memory)

code:
-refactoring (reorganise some classes, clean up SwingGUI, ...)



DONE

-user can build boards from the 4 board pieces (front and back side) of the original game.
-user can choose the number of robots (1 - 5)
-user can place robots and goal (starting positions).
-find all shortest solutions and choose the one with the minimum robots moved (this is a stronger definition of "optimal solution").
-user option for solution with any / minimum / maximum number of robots moved. (used in SolverBFS)
-detect solutions containing rebound moves (reverse).
-compute solutions without any rebound moves (optionally)

-user can load and save boards. = replaced by game ID.
-user can load and save games (board layout, starting positions, user solution). = replaced by game ID.

